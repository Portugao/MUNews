<?php
/**
 * News.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link https://ziku.la
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\NewsModule\ContentType\Base;

use Zikula\Common\Content\AbstractContentType;
use MU\NewsModule\ContentType\Form\Type\ItemListType as FormType;
use MU\NewsModule\Entity\Factory\EntityFactory;
use MU\NewsModule\Helper\CategoryHelper;
use MU\NewsModule\Helper\ControllerHelper;
use MU\NewsModule\Helper\FeatureActivationHelper;
use MU\NewsModule\Helper\ModelHelper;
use MU\NewsModule\Helper\PermissionHelper;

/**
 * Generic item list content type base class.
 */
abstract class AbstractItemListType extends AbstractContentType
{
    /**
     * @var ControllerHelper
     */
    protected $controllerHelper;
    
    /**
     * @var ModelHelper
     */
    protected $modelHelper;
    
    /**
     * @var PermissionHelper
     */
    protected $modulePermissionHelper;
    
    /**
     * @var EntityFactory
     */
    protected $entityFactory;
    
    /**
     * @var FeatureActivationHelper
     */
    protected $featureActivationHelper;
    
    /**
     * @var CategoryHelper
     */
    protected $categoryHelper;
    
    /**
     * List of object types allowing categorisation.
     *
     * @var array
     */
    protected $categorisableObjectTypes;
    
    public function getIcon()
    {
        return 'th-list';
    }
    
    public function getTitle()
    {
        return $this->translator->__('News list', 'munewsmodule');
    }
    
    public function getDescription()
    {
        return $this->translator->__('Display a list of news objects.', 'munewsmodule');
    }
    
    public function getDefaultData()
    {
        return [
            'objectType' => 'message',
            'sorting' => 'default',
            'amount' => 1,
            'template' => 'itemlist_display.html.twig',
            'customTemplate' => null,
            'filter' => ''
        ];
    }
    
    public function getData()
    {
        $data = parent::getData();
    
        $contextArgs = ['name' => 'list'];
        if (!isset($data['objectType']) || !in_array($data['objectType'], $this->controllerHelper->getObjectTypes('contentType', $contextArgs), true)) {
            $data['objectType'] = $this->controllerHelper->getDefaultObjectType('contentType', $contextArgs);
        }
    
        if (!isset($data['template'])) {
            $data['template'] = 'itemlist_' . $data['objectType'] . '_display.html.twig';
        }
    
        $objectType = $data['objectType'];
        if ($this->featureActivationHelper->isEnabled(FeatureActivationHelper::CATEGORIES, $objectType)) {
            $this->categorisableObjectTypes = ['message'];
    
            $primaryRegistry = $this->categoryHelper->getPrimaryProperty($objectType);
            if (!isset($data['categories'])) {
                $data['categories'] = [$primaryRegistry => []];
            } else {
                if (!is_array($data['categories'])) {
                    $data['categories'] = explode(',', $data['categories']);
                }
                if (count($data['categories']) > 0) {
                    $firstCategories = reset($data['categories']);
                    if (!is_array($firstCategories)) {
                        $firstCategories = [$firstCategories];
                    }
                    $data['categories'] = [$primaryRegistry => $firstCategories];
                }
            }
        }
        $this->data = $data;
    
        return $data;
    }
    
    public function displayView()
    {
        $objectType = $this->data['objectType'];
        $repository = $this->entityFactory->getRepository($objectType);
    
        // create query
        $orderBy = $this->modelHelper->resolveSortParameter($this->data['objectType'], $this->data['sorting']);
        $qb = $repository->getListQueryBuilder($this->data['filter'], $orderBy);
    
        $this->getData();
        if (in_array($objectType, $this->categorisableObjectTypes)) {
            if ($this->featureActivationHelper->isEnabled(FeatureActivationHelper::CATEGORIES, $objectType)) {
                // apply category filters
                if (is_array($this->data['categories']) && count($this->data['categories']) > 0) {
                    $qb = $this->categoryHelper->buildFilterClauses($qb, $objectType, $this->data['categories']);
                }
            }
        }
    
        // get objects from database
        $currentPage = 1;
        $resultsPerPage = isset($this->data['amount']) ? $this->data['amount'] : 1;
        $query = $repository->getSelectWherePaginatedQuery($qb, $currentPage, $resultsPerPage);
        try {
            list($entities, $objectCount) = $repository->retrieveCollectionResult($query, true);
        } catch (\Exception $exception) {
            $entities = [];
            $objectCount = 0;
        }
    
        // filter by permissions
        $entities = $this->modulePermissionHelper->filterCollection($objectType, $entities, ACCESS_READ);
    
        $data = $this->data;
        $data['items'] = $entities;
    
        $data = $this->controllerHelper->addTemplateParameters($objectType, $data, 'contentType', []);
        $this->data = $data;
    
        return parent::displayView();
    }
    
    public function getViewTemplatePath($suffix = '')
    {
        $templateFile = $this->data['template'];
        if ('custom' === $templateFile && null !== $this->data['customTemplate'] && '' !== $this->data['customTemplate']) {
            $templateFile = $this->data['customTemplate'];
        }
    
        $templateForObjectType = str_replace('itemlist_', 'itemlist_' . $this->data['objectType'] . '_', $templateFile);
    
        $templateOptions = [
            'ContentType/' . $templateForObjectType,
            'ContentType/' . $templateFile,
            'ContentType/itemlist_display.html.twig'
        ];
    
        $template = '';
        foreach ($templateOptions as $templatePath) {
            if ($this->twigLoader->exists('@MUNewsModule/' . $templatePath)) {
                $template = '@MUNewsModule/' . $templatePath;
                break;
            }
        }
    
        return $template;
    }
    
    public function getEditFormClass()
    {
        return FormType::class;
    }
    
    public function getEditFormOptions($context)
    {
        $options = parent::getEditFormOptions($context);
        $data = $this->getData();
        $options['object_type'] = $data['objectType'];
        $this->categorisableObjectTypes = ['message'];
        $options['is_categorisable'] = in_array($this->data['objectType'], $this->categorisableObjectTypes);
        $options['category_helper'] = $this->categoryHelper;
        $options['feature_activation_helper'] = $this->featureActivationHelper;
    
        return $options;
    }
    
    public function setControllerHelper(ControllerHelper $controllerHelper)
    {
        $this->controllerHelper = $controllerHelper;
    }
    
    public function setModelHelper(ModelHelper $modelHelper)
    {
        $this->modelHelper = $modelHelper;
    }
    
    public function setModulePermissionHelper(PermissionHelper $permissionHelper)
    {
        $this->modulePermissionHelper = $permissionHelper;
    }
    
    public function setEntityFactory(EntityFactory $entityFactory)
    {
        $this->entityFactory = $entityFactory;
    }
    
    public function setCategoryDependencies(
        CategoryHelper $categoryHelper,
        FeatureActivationHelper $featureActivationHelper
    ) {
        $this->categoryHelper = $categoryHelper;
        $this->featureActivationHelper = $featureActivationHelper;
    }
}
