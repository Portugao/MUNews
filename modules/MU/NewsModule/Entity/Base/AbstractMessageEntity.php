<?php

/**
 * News.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @see https://homepages-mit-zikula.de
 * @see https://ziku.la
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\NewsModule\Entity\Base;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Gedmo\Mapping\Annotation as Gedmo;
use Gedmo\Translatable\Translatable;
use RuntimeException;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use Zikula\Core\Doctrine\EntityAccess;
use Zikula\UsersModule\Entity\UserEntity;
use MU\NewsModule\Traits\StandardFieldsTrait;
use MU\NewsModule\Validator\Constraints as NewsAssert;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for message entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 */
abstract class AbstractMessageEntity extends EntityAccess implements Translatable
{
    /**
     * Hook standard fields behaviour embedding createdBy, updatedBy, createdDate, updatedDate fields.
     */
    use StandardFieldsTrait;

    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'message';
    
    /**
     * @var string Path to upload base folder
     */
    protected $_uploadBasePath = '';
    
    /**
     * @var string Base URL to upload files
     */
    protected $_uploadBaseUrl = '';
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @var int $id
     */
    protected $id = 0;
    
    /**
     * the current workflow state
     *
     * @ORM\Column(length=20)
     * @Assert\NotBlank()
     * @NewsAssert\ListEntry(entityName="message", propertyName="workflowState", multiple=false)
     * @var string $workflowState
     */
    protected $workflowState = 'initial';
    
    /**
     * @Gedmo\Translatable
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $title
     */
    protected $title = '';
    
    /**
     * @Gedmo\Translatable
     * @ORM\Column(type="text", length=10000)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="10000")
     * @var string $startText
     */
    protected $startText = '';
    
    /**
     * Image upload 1 meta data array.
     *
     * @ORM\Column(type="array")
     * @Assert\Type(type="array")
     * @var array $imageUpload1Meta
     */
    protected $imageUpload1Meta = [];
    
    /**
     * @ORM\Column(name="imageUpload1", length=255, nullable=true)
     * @Assert\Length(min="0", max="255")
     * @var string $imageUpload1FileName
     */
    protected $imageUpload1FileName = null;
    
    /**
     * Full image upload 1 path as url.
     *
     * @Assert\Type(type="string")
     * @var string $imageUpload1Url
     */
    protected $imageUpload1Url = '';
    
    /**
     * Image upload 1 file object.
     *
     * @Assert\File(
     *    maxSize = "200k",
     *    mimeTypes = {"image/*"}
     * )
     * @Assert\Image(
     * )
     * @var File $imageUpload1
     */
    protected $imageUpload1 = null;
    
    /**
     * @Gedmo\Translatable
     * @ORM\Column(type="text", length=20000)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="20000")
     * @var string $mainText
     */
    protected $mainText = '';
    
    /**
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotNull()
     * @Assert\LessThan(value=100000000000)
     * @var int $amountOfViews
     */
    protected $amountOfViews = 0;
    
    /**
     * @ORM\Column(length=100)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="100")
     * @var string $author
     */
    protected $author = '';
    
    /**
     * @ORM\ManyToOne(targetEntity="Zikula\UsersModule\Entity\UserEntity")
     * @ORM\JoinColumn(referencedColumnName="uid", nullable=true)
     * @var UserEntity $approver
     */
    protected $approver = null;
    
    /**
     * @ORM\Column(type="text", length=2000)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="2000")
     * @var string $notes
     */
    protected $notes = '';
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var bool $displayOnIndex
     */
    protected $displayOnIndex = true;
    
    /**
     * @ORM\Column(length=7)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="7")
     * @Assert\Locale()
     * @var string $messageLanguage
     */
    protected $messageLanguage = '';
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var bool $allowComments
     */
    protected $allowComments = true;
    
    /**
     * Image upload 2 meta data array.
     *
     * @ORM\Column(type="array")
     * @Assert\Type(type="array")
     * @var array $imageUpload2Meta
     */
    protected $imageUpload2Meta = [];
    
    /**
     * @ORM\Column(name="imageUpload2", length=255, nullable=true)
     * @Assert\Length(min="0", max="255")
     * @var string $imageUpload2FileName
     */
    protected $imageUpload2FileName = null;
    
    /**
     * Full image upload 2 path as url.
     *
     * @Assert\Type(type="string")
     * @var string $imageUpload2Url
     */
    protected $imageUpload2Url = '';
    
    /**
     * Image upload 2 file object.
     *
     * @Assert\File(
     *    maxSize = "200k",
     *    mimeTypes = {"image/*"}
     * )
     * @Assert\Image(
     * )
     * @var File $imageUpload2
     */
    protected $imageUpload2 = null;
    
    /**
     * Image upload 3 meta data array.
     *
     * @ORM\Column(type="array")
     * @Assert\Type(type="array")
     * @var array $imageUpload3Meta
     */
    protected $imageUpload3Meta = [];
    
    /**
     * @ORM\Column(name="imageUpload3", length=255, nullable=true)
     * @Assert\Length(min="0", max="255")
     * @var string $imageUpload3FileName
     */
    protected $imageUpload3FileName = null;
    
    /**
     * Full image upload 3 path as url.
     *
     * @Assert\Type(type="string")
     * @var string $imageUpload3Url
     */
    protected $imageUpload3Url = '';
    
    /**
     * Image upload 3 file object.
     *
     * @Assert\File(
     *    maxSize = "200k",
     *    mimeTypes = {"image/*"}
     * )
     * @Assert\Image(
     * )
     * @var File $imageUpload3
     */
    protected $imageUpload3 = null;
    
    /**
     * Image upload 4 meta data array.
     *
     * @ORM\Column(type="array")
     * @Assert\Type(type="array")
     * @var array $imageUpload4Meta
     */
    protected $imageUpload4Meta = [];
    
    /**
     * @ORM\Column(name="imageUpload4", length=255, nullable=true)
     * @Assert\Length(min="0", max="255")
     * @var string $imageUpload4FileName
     */
    protected $imageUpload4FileName = null;
    
    /**
     * Full image upload 4 path as url.
     *
     * @Assert\Type(type="string")
     * @var string $imageUpload4Url
     */
    protected $imageUpload4Url = '';
    
    /**
     * Image upload 4 file object.
     *
     * @Assert\File(
     *    maxSize = "200k",
     *    mimeTypes = {"image/*"}
     * )
     * @Assert\Image(
     * )
     * @var File $imageUpload4
     */
    protected $imageUpload4 = null;
    
    /**
     * @ORM\Column(type="datetime", nullable=true)
     * @Assert\DateTime()
     * @var \DateTime $startDate
     */
    protected $startDate;
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var bool $noEndDate
     */
    protected $noEndDate = true;
    
    /**
     * @ORM\Column(type="datetime", nullable=true)
     * @Assert\DateTime()
     * @Assert\Expression("!value or value > this.getStartDate()", message="The start must be before the end.")
     * @var \DateTime $endDate
     */
    protected $endDate;
    
    /**
     * @ORM\Column(type="smallint")
     * @Assert\Type(type="integer")
     * @Assert\NotNull()
     * @Assert\LessThan(value=100)
     * @var int $weight
     */
    protected $weight = 1;
    
    
    /**
     * @Gedmo\Translatable
     * @Gedmo\Slug(fields={"title"}, updatable=true, unique=true, separator="-", style="lower")
     * @ORM\Column(type="string", length=255, unique=true)
     * @Assert\Length(min="1", max="255")
     * @var string $slug
     */
    protected $slug;
    
    /**
     * Used locale to override Translation listener's locale.
     * This is not a mapped field of entity metadata, just a simple property.
     *
     * @Assert\Locale()
     * @Gedmo\Locale
     * @var string $locale
     */
    protected $locale;
    
    /**
     * @ORM\OneToMany(targetEntity="\MU\NewsModule\Entity\MessageAttributeEntity", 
     *                mappedBy="entity", cascade={"all"}, 
     *                orphanRemoval=true, indexBy="name")
     * @var \MU\NewsModule\Entity\MessageAttributeEntity
     */
    protected $attributes = null;
    
    /**
     * @ORM\OneToMany(targetEntity="\MU\NewsModule\Entity\MessageCategoryEntity", 
     *                mappedBy="entity", cascade={"all"}, 
     *                orphanRemoval=true)
     * @var \MU\NewsModule\Entity\MessageCategoryEntity
     */
    protected $categories = null;
    
    /**
     * Bidirectional - One message [message] has many images [images] (INVERSE SIDE).
     *
     * @ORM\OneToMany(targetEntity="MU\NewsModule\Entity\ImageEntity", mappedBy="message", cascade={"persist", "remove", "detach"})
     * @ORM\JoinTable(name="mu_news_messageimages")
     * @ORM\OrderBy({"sortNumber" = "ASC"})
     * @var \MU\NewsModule\Entity\ImageEntity[] $images
     */
    protected $images = null;
    
    
    /**
     * MessageEntity constructor.
     *
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     */
    public function __construct()
    {
        $this->images = new ArrayCollection();
        $this->attributes = new ArrayCollection();
        $this->categories = new ArrayCollection();
    }
    
    /**
     * Returns the _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Sets the _object type.
     *
     * @param string $_objectType
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        if ($this->_objectType !== $_objectType) {
            $this->_objectType = isset($_objectType) ? $_objectType : '';
        }
    }
    
    /**
     * Returns the _upload base path.
     *
     * @return string
     */
    public function get_uploadBasePath()
    {
        return $this->_uploadBasePath;
    }
    
    /**
     * Sets the _upload base path.
     *
     * @param string $_uploadBasePath
     *
     * @return void
     */
    public function set_uploadBasePath($_uploadBasePath)
    {
        if ($this->_uploadBasePath !== $_uploadBasePath) {
            $this->_uploadBasePath = isset($_uploadBasePath) ? $_uploadBasePath : '';
        }
    }
    
    /**
     * Returns the _upload base url.
     *
     * @return string
     */
    public function get_uploadBaseUrl()
    {
        return $this->_uploadBaseUrl;
    }
    
    /**
     * Sets the _upload base url.
     *
     * @param string $_uploadBaseUrl
     *
     * @return void
     */
    public function set_uploadBaseUrl($_uploadBaseUrl)
    {
        if ($this->_uploadBaseUrl !== $_uploadBaseUrl) {
            $this->_uploadBaseUrl = isset($_uploadBaseUrl) ? $_uploadBaseUrl : '';
        }
    }
    
    
    /**
     * Returns the id.
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Sets the id.
     *
     * @param int $id
     *
     * @return void
     */
    public function setId($id = null)
    {
        if ((int)$this->id !== (int)$id) {
            $this->id = (int)$id;
        }
    }
    
    /**
     * Returns the workflow state.
     *
     * @return string
     */
    public function getWorkflowState()
    {
        return $this->workflowState;
    }
    
    /**
     * Sets the workflow state.
     *
     * @param string $workflowState
     *
     * @return void
     */
    public function setWorkflowState($workflowState)
    {
        if ($this->workflowState !== $workflowState) {
            $this->workflowState = isset($workflowState) ? $workflowState : '';
        }
    }
    
    /**
     * Returns the title.
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }
    
    /**
     * Sets the title.
     *
     * @param string $title
     *
     * @return void
     */
    public function setTitle($title)
    {
        if ($this->title !== $title) {
            $this->title = isset($title) ? $title : '';
        }
    }
    
    /**
     * Returns the start text.
     *
     * @return string
     */
    public function getStartText()
    {
        return $this->startText;
    }
    
    /**
     * Sets the start text.
     *
     * @param string $startText
     *
     * @return void
     */
    public function setStartText($startText)
    {
        if ($this->startText !== $startText) {
            $this->startText = isset($startText) ? $startText : '';
        }
    }
    
    /**
     * Returns the image upload 1.
     *
     * @return File
     */
    public function getImageUpload1()
    {
        if (null !== $this->imageUpload1) {
            return $this->imageUpload1;
        }
    
        $fileName = $this->imageUpload1FileName;
        if (!empty($fileName) && !$this->_uploadBasePath) {
            throw new RuntimeException('Invalid upload base path in ' . get_class($this) . '#getImageUpload1().');
        }
    
        $filePath = $this->_uploadBasePath . 'imageupload1/' . $fileName;
        if (!empty($fileName) && file_exists($filePath)) {
            $this->imageUpload1 = new File($filePath);
            $this->setImageUpload1Url($this->_uploadBaseUrl . '/' . $filePath);
        } else {
            $this->setImageUpload1FileName('');
            $this->setImageUpload1Url('');
            $this->setImageUpload1Meta([]);
        }
    
        return $this->imageUpload1;
    }
    
    /**
     * Sets the image upload 1.
     *
     * @return void
     */
    public function setImageUpload1(File $imageUpload1 = null)
    {
        if (null === $this->imageUpload1 && null === $imageUpload1) {
            return;
        }
        if (null !== $this->imageUpload1 && null !== $imageUpload1 && $this->imageUpload1 instanceof File && $this->imageUpload1->getRealPath() === $imageUpload1->getRealPath()) {
            return;
        }
        $this->imageUpload1 = $imageUpload1;
    
        if (null === $this->imageUpload1 || '' === $this->imageUpload1) {
            $this->setImageUpload1FileName('');
            $this->setImageUpload1Url('');
            $this->setImageUpload1Meta([]);
        } else {
            $this->setImageUpload1FileName($this->imageUpload1->getFilename());
        }
    }
    
    /**
     * Returns the image upload 1 file name.
     *
     * @return string
     */
    public function getImageUpload1FileName()
    {
        return $this->imageUpload1FileName;
    }
    
    /**
     * Sets the image upload 1 file name.
     *
     * @param string $imageUpload1FileName
     *
     * @return void
     */
    public function setImageUpload1FileName($imageUpload1FileName = null)
    {
        if ($this->imageUpload1FileName !== $imageUpload1FileName) {
            $this->imageUpload1FileName = $imageUpload1FileName;
        }
    }
    
    /**
     * Returns the image upload 1 url.
     *
     * @return string
     */
    public function getImageUpload1Url()
    {
        return $this->imageUpload1Url;
    }
    
    /**
     * Sets the image upload 1 url.
     *
     * @param string $imageUpload1Url
     *
     * @return void
     */
    public function setImageUpload1Url($imageUpload1Url = null)
    {
        if ($this->imageUpload1Url !== $imageUpload1Url) {
            $this->imageUpload1Url = $imageUpload1Url;
        }
    }
    
    /**
     * Returns the image upload 1 meta.
     *
     * @return array
     */
    public function getImageUpload1Meta()
    {
        return $this->imageUpload1Meta;
    }
    
    /**
     * Sets the image upload 1 meta.
     *
     * @param array $imageUpload1Meta
     *
     * @return void
     */
    public function setImageUpload1Meta(array $imageUpload1Meta = [])
    {
        if ($this->imageUpload1Meta !== $imageUpload1Meta) {
            $this->imageUpload1Meta = $imageUpload1Meta;
        }
    }
    
    /**
     * Returns the main text.
     *
     * @return string
     */
    public function getMainText()
    {
        return $this->mainText;
    }
    
    /**
     * Sets the main text.
     *
     * @param string $mainText
     *
     * @return void
     */
    public function setMainText($mainText)
    {
        if ($this->mainText !== $mainText) {
            $this->mainText = isset($mainText) ? $mainText : '';
        }
    }
    
    /**
     * Returns the amount of views.
     *
     * @return int
     */
    public function getAmountOfViews()
    {
        return $this->amountOfViews;
    }
    
    /**
     * Sets the amount of views.
     *
     * @param int $amountOfViews
     *
     * @return void
     */
    public function setAmountOfViews($amountOfViews)
    {
        if ((int)$this->amountOfViews !== (int)$amountOfViews) {
            $this->amountOfViews = (int)$amountOfViews;
        }
    }
    
    /**
     * Returns the author.
     *
     * @return string
     */
    public function getAuthor()
    {
        return $this->author;
    }
    
    /**
     * Sets the author.
     *
     * @param string $author
     *
     * @return void
     */
    public function setAuthor($author)
    {
        if ($this->author !== $author) {
            $this->author = isset($author) ? $author : '';
        }
    }
    
    /**
     * Returns the approver.
     *
     * @return UserEntity
     */
    public function getApprover()
    {
        return $this->approver;
    }
    
    /**
     * Sets the approver.
     *
     * @param UserEntity $approver
     *
     * @return void
     */
    public function setApprover($approver = null)
    {
        if ($this->approver !== $approver) {
            $this->approver = $approver;
        }
    }
    
    /**
     * Returns the notes.
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->notes;
    }
    
    /**
     * Sets the notes.
     *
     * @param string $notes
     *
     * @return void
     */
    public function setNotes($notes)
    {
        if ($this->notes !== $notes) {
            $this->notes = isset($notes) ? $notes : '';
        }
    }
    
    /**
     * Returns the display on index.
     *
     * @return bool
     */
    public function getDisplayOnIndex()
    {
        return $this->displayOnIndex;
    }
    
    /**
     * Sets the display on index.
     *
     * @param bool $displayOnIndex
     *
     * @return void
     */
    public function setDisplayOnIndex($displayOnIndex)
    {
        if ((bool)$this->displayOnIndex !== (bool)$displayOnIndex) {
            $this->displayOnIndex = (bool)$displayOnIndex;
        }
    }
    
    /**
     * Returns the message language.
     *
     * @return string
     */
    public function getMessageLanguage()
    {
        return $this->messageLanguage;
    }
    
    /**
     * Sets the message language.
     *
     * @param string $messageLanguage
     *
     * @return void
     */
    public function setMessageLanguage($messageLanguage)
    {
        if ($this->messageLanguage !== $messageLanguage) {
            $this->messageLanguage = isset($messageLanguage) ? $messageLanguage : '';
        }
    }
    
    /**
     * Returns the allow comments.
     *
     * @return bool
     */
    public function getAllowComments()
    {
        return $this->allowComments;
    }
    
    /**
     * Sets the allow comments.
     *
     * @param bool $allowComments
     *
     * @return void
     */
    public function setAllowComments($allowComments)
    {
        if ((bool)$this->allowComments !== (bool)$allowComments) {
            $this->allowComments = (bool)$allowComments;
        }
    }
    
    /**
     * Returns the image upload 2.
     *
     * @return File
     */
    public function getImageUpload2()
    {
        if (null !== $this->imageUpload2) {
            return $this->imageUpload2;
        }
    
        $fileName = $this->imageUpload2FileName;
        if (!empty($fileName) && !$this->_uploadBasePath) {
            throw new RuntimeException('Invalid upload base path in ' . get_class($this) . '#getImageUpload2().');
        }
    
        $filePath = $this->_uploadBasePath . 'imageupload2/' . $fileName;
        if (!empty($fileName) && file_exists($filePath)) {
            $this->imageUpload2 = new File($filePath);
            $this->setImageUpload2Url($this->_uploadBaseUrl . '/' . $filePath);
        } else {
            $this->setImageUpload2FileName('');
            $this->setImageUpload2Url('');
            $this->setImageUpload2Meta([]);
        }
    
        return $this->imageUpload2;
    }
    
    /**
     * Sets the image upload 2.
     *
     * @return void
     */
    public function setImageUpload2(File $imageUpload2 = null)
    {
        if (null === $this->imageUpload2 && null === $imageUpload2) {
            return;
        }
        if (null !== $this->imageUpload2 && null !== $imageUpload2 && $this->imageUpload2 instanceof File && $this->imageUpload2->getRealPath() === $imageUpload2->getRealPath()) {
            return;
        }
        $this->imageUpload2 = $imageUpload2;
    
        if (null === $this->imageUpload2 || '' === $this->imageUpload2) {
            $this->setImageUpload2FileName('');
            $this->setImageUpload2Url('');
            $this->setImageUpload2Meta([]);
        } else {
            $this->setImageUpload2FileName($this->imageUpload2->getFilename());
        }
    }
    
    /**
     * Returns the image upload 2 file name.
     *
     * @return string
     */
    public function getImageUpload2FileName()
    {
        return $this->imageUpload2FileName;
    }
    
    /**
     * Sets the image upload 2 file name.
     *
     * @param string $imageUpload2FileName
     *
     * @return void
     */
    public function setImageUpload2FileName($imageUpload2FileName = null)
    {
        if ($this->imageUpload2FileName !== $imageUpload2FileName) {
            $this->imageUpload2FileName = $imageUpload2FileName;
        }
    }
    
    /**
     * Returns the image upload 2 url.
     *
     * @return string
     */
    public function getImageUpload2Url()
    {
        return $this->imageUpload2Url;
    }
    
    /**
     * Sets the image upload 2 url.
     *
     * @param string $imageUpload2Url
     *
     * @return void
     */
    public function setImageUpload2Url($imageUpload2Url = null)
    {
        if ($this->imageUpload2Url !== $imageUpload2Url) {
            $this->imageUpload2Url = $imageUpload2Url;
        }
    }
    
    /**
     * Returns the image upload 2 meta.
     *
     * @return array
     */
    public function getImageUpload2Meta()
    {
        return $this->imageUpload2Meta;
    }
    
    /**
     * Sets the image upload 2 meta.
     *
     * @param array $imageUpload2Meta
     *
     * @return void
     */
    public function setImageUpload2Meta(array $imageUpload2Meta = [])
    {
        if ($this->imageUpload2Meta !== $imageUpload2Meta) {
            $this->imageUpload2Meta = $imageUpload2Meta;
        }
    }
    
    /**
     * Returns the image upload 3.
     *
     * @return File
     */
    public function getImageUpload3()
    {
        if (null !== $this->imageUpload3) {
            return $this->imageUpload3;
        }
    
        $fileName = $this->imageUpload3FileName;
        if (!empty($fileName) && !$this->_uploadBasePath) {
            throw new RuntimeException('Invalid upload base path in ' . get_class($this) . '#getImageUpload3().');
        }
    
        $filePath = $this->_uploadBasePath . 'imageupload3/' . $fileName;
        if (!empty($fileName) && file_exists($filePath)) {
            $this->imageUpload3 = new File($filePath);
            $this->setImageUpload3Url($this->_uploadBaseUrl . '/' . $filePath);
        } else {
            $this->setImageUpload3FileName('');
            $this->setImageUpload3Url('');
            $this->setImageUpload3Meta([]);
        }
    
        return $this->imageUpload3;
    }
    
    /**
     * Sets the image upload 3.
     *
     * @return void
     */
    public function setImageUpload3(File $imageUpload3 = null)
    {
        if (null === $this->imageUpload3 && null === $imageUpload3) {
            return;
        }
        if (null !== $this->imageUpload3 && null !== $imageUpload3 && $this->imageUpload3 instanceof File && $this->imageUpload3->getRealPath() === $imageUpload3->getRealPath()) {
            return;
        }
        $this->imageUpload3 = $imageUpload3;
    
        if (null === $this->imageUpload3 || '' === $this->imageUpload3) {
            $this->setImageUpload3FileName('');
            $this->setImageUpload3Url('');
            $this->setImageUpload3Meta([]);
        } else {
            $this->setImageUpload3FileName($this->imageUpload3->getFilename());
        }
    }
    
    /**
     * Returns the image upload 3 file name.
     *
     * @return string
     */
    public function getImageUpload3FileName()
    {
        return $this->imageUpload3FileName;
    }
    
    /**
     * Sets the image upload 3 file name.
     *
     * @param string $imageUpload3FileName
     *
     * @return void
     */
    public function setImageUpload3FileName($imageUpload3FileName = null)
    {
        if ($this->imageUpload3FileName !== $imageUpload3FileName) {
            $this->imageUpload3FileName = $imageUpload3FileName;
        }
    }
    
    /**
     * Returns the image upload 3 url.
     *
     * @return string
     */
    public function getImageUpload3Url()
    {
        return $this->imageUpload3Url;
    }
    
    /**
     * Sets the image upload 3 url.
     *
     * @param string $imageUpload3Url
     *
     * @return void
     */
    public function setImageUpload3Url($imageUpload3Url = null)
    {
        if ($this->imageUpload3Url !== $imageUpload3Url) {
            $this->imageUpload3Url = $imageUpload3Url;
        }
    }
    
    /**
     * Returns the image upload 3 meta.
     *
     * @return array
     */
    public function getImageUpload3Meta()
    {
        return $this->imageUpload3Meta;
    }
    
    /**
     * Sets the image upload 3 meta.
     *
     * @param array $imageUpload3Meta
     *
     * @return void
     */
    public function setImageUpload3Meta(array $imageUpload3Meta = [])
    {
        if ($this->imageUpload3Meta !== $imageUpload3Meta) {
            $this->imageUpload3Meta = $imageUpload3Meta;
        }
    }
    
    /**
     * Returns the image upload 4.
     *
     * @return File
     */
    public function getImageUpload4()
    {
        if (null !== $this->imageUpload4) {
            return $this->imageUpload4;
        }
    
        $fileName = $this->imageUpload4FileName;
        if (!empty($fileName) && !$this->_uploadBasePath) {
            throw new RuntimeException('Invalid upload base path in ' . get_class($this) . '#getImageUpload4().');
        }
    
        $filePath = $this->_uploadBasePath . 'imageupload4/' . $fileName;
        if (!empty($fileName) && file_exists($filePath)) {
            $this->imageUpload4 = new File($filePath);
            $this->setImageUpload4Url($this->_uploadBaseUrl . '/' . $filePath);
        } else {
            $this->setImageUpload4FileName('');
            $this->setImageUpload4Url('');
            $this->setImageUpload4Meta([]);
        }
    
        return $this->imageUpload4;
    }
    
    /**
     * Sets the image upload 4.
     *
     * @return void
     */
    public function setImageUpload4(File $imageUpload4 = null)
    {
        if (null === $this->imageUpload4 && null === $imageUpload4) {
            return;
        }
        if (null !== $this->imageUpload4 && null !== $imageUpload4 && $this->imageUpload4 instanceof File && $this->imageUpload4->getRealPath() === $imageUpload4->getRealPath()) {
            return;
        }
        $this->imageUpload4 = $imageUpload4;
    
        if (null === $this->imageUpload4 || '' === $this->imageUpload4) {
            $this->setImageUpload4FileName('');
            $this->setImageUpload4Url('');
            $this->setImageUpload4Meta([]);
        } else {
            $this->setImageUpload4FileName($this->imageUpload4->getFilename());
        }
    }
    
    /**
     * Returns the image upload 4 file name.
     *
     * @return string
     */
    public function getImageUpload4FileName()
    {
        return $this->imageUpload4FileName;
    }
    
    /**
     * Sets the image upload 4 file name.
     *
     * @param string $imageUpload4FileName
     *
     * @return void
     */
    public function setImageUpload4FileName($imageUpload4FileName = null)
    {
        if ($this->imageUpload4FileName !== $imageUpload4FileName) {
            $this->imageUpload4FileName = $imageUpload4FileName;
        }
    }
    
    /**
     * Returns the image upload 4 url.
     *
     * @return string
     */
    public function getImageUpload4Url()
    {
        return $this->imageUpload4Url;
    }
    
    /**
     * Sets the image upload 4 url.
     *
     * @param string $imageUpload4Url
     *
     * @return void
     */
    public function setImageUpload4Url($imageUpload4Url = null)
    {
        if ($this->imageUpload4Url !== $imageUpload4Url) {
            $this->imageUpload4Url = $imageUpload4Url;
        }
    }
    
    /**
     * Returns the image upload 4 meta.
     *
     * @return array
     */
    public function getImageUpload4Meta()
    {
        return $this->imageUpload4Meta;
    }
    
    /**
     * Sets the image upload 4 meta.
     *
     * @param array $imageUpload4Meta
     *
     * @return void
     */
    public function setImageUpload4Meta(array $imageUpload4Meta = [])
    {
        if ($this->imageUpload4Meta !== $imageUpload4Meta) {
            $this->imageUpload4Meta = $imageUpload4Meta;
        }
    }
    
    /**
     * Returns the start date.
     *
     * @return \DateTimeInterface
     */
    public function getStartDate()
    {
        return $this->startDate;
    }
    
    /**
     * Sets the start date.
     *
     * @param \DateTimeInterface $startDate
     *
     * @return void
     */
    public function setStartDate($startDate = null)
    {
        if ($this->startDate !== $startDate) {
            if (!(null === $startDate && empty($startDate)) && !(is_object($startDate) && $startDate instanceOf \DateTimeInterface)) {
                $startDate = new \DateTime($startDate);
            }
            
            if ($this->startDate !== $startDate) {
                $this->startDate = $startDate;
            }
        }
    }
    
    /**
     * Returns the no end date.
     *
     * @return bool
     */
    public function getNoEndDate()
    {
        return $this->noEndDate;
    }
    
    /**
     * Sets the no end date.
     *
     * @param bool $noEndDate
     *
     * @return void
     */
    public function setNoEndDate($noEndDate)
    {
        if ((bool)$this->noEndDate !== (bool)$noEndDate) {
            $this->noEndDate = (bool)$noEndDate;
        }
    }
    
    /**
     * Returns the end date.
     *
     * @return \DateTimeInterface
     */
    public function getEndDate()
    {
        return $this->endDate;
    }
    
    /**
     * Sets the end date.
     *
     * @param \DateTimeInterface $endDate
     *
     * @return void
     */
    public function setEndDate($endDate = null)
    {
        if ($this->endDate !== $endDate) {
            if (!(null === $endDate && empty($endDate)) && !(is_object($endDate) && $endDate instanceOf \DateTimeInterface)) {
                $endDate = new \DateTime($endDate);
            }
            
            if ($this->endDate !== $endDate) {
                $this->endDate = $endDate;
            }
        }
    }
    
    /**
     * Returns the weight.
     *
     * @return int
     */
    public function getWeight()
    {
        return $this->weight;
    }
    
    /**
     * Sets the weight.
     *
     * @param int $weight
     *
     * @return void
     */
    public function setWeight($weight)
    {
        if ((int)$this->weight !== (int)$weight) {
            $this->weight = (int)$weight;
        }
    }
    
    /**
     * Returns the slug.
     *
     * @return string
     */
    public function getSlug()
    {
        return $this->slug;
    }
    
    /**
     * Sets the slug.
     *
     * @param string $slug
     *
     * @return void
     */
    public function setSlug($slug = null)
    {
        if ($this->slug !== $slug) {
            $this->slug = $slug;
        }
    }
    
    /**
     * Returns the locale.
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->locale;
    }
    
    /**
     * Sets the locale.
     *
     * @param string $locale
     *
     * @return void
     */
    public function setLocale($locale = null)
    {
        if ($this->locale !== $locale) {
            $this->locale = $locale;
        }
    }
    
    /**
     * Returns the attributes.
     *
     * @return Collection[]
     */
    public function getAttributes()
    {
        return $this->attributes;
    }
    
    /**
     * Set attribute.
     *
     * @param string $name Attribute name
     * @param string $value Attribute value
     *
     * @return void
     */
    public function setAttribute($name, $value)
    {
        if (isset($this->attributes[$name])) {
            if (null === $value) {
                $this->attributes->remove($name);
            } else {
                $this->attributes[$name]->setValue($value);
            }
        } else {
            $this->attributes[$name] = new \MU\NewsModule\Entity\MessageAttributeEntity($name, $value, $this);
        }
    }
    
    /**
     * Returns the categories.
     *
     * @return Collection[]
     */
    public function getCategories()
    {
        return $this->categories;
    }
    
    
    /**
     * Sets the categories.
     *
     * @return void
     */
    public function setCategories(Collection $categories)
    {
        foreach ($this->categories as $category) {
            if (false === ($key = $this->collectionContains($categories, $category))) {
                $this->categories->removeElement($category);
            } else {
                $categories->remove($key);
            }
        }
        foreach ($categories as $category) {
            $this->categories->add($category);
        }
    }
    
    /**
     * Checks if a collection contains an element based only on two criteria (categoryRegistryId, category).
     *
     * @param Collection $collection Given collection
     * @param \MU\NewsModule\Entity\MessageCategoryEntity $element Element to search for
     *
     * @return bool|int
     */
    private function collectionContains(Collection $collection, \MU\NewsModule\Entity\MessageCategoryEntity $element)
    {
        foreach ($collection as $key => $category) {
            /** @var \MU\NewsModule\Entity\MessageCategoryEntity $category */
            if ($category->getCategoryRegistryId() === $element->getCategoryRegistryId()
                && $category->getCategory() === $element->getCategory()
            ) {
                return $key;
            }
        }
    
        return false;
    }
    
    /**
     * Returns the images.
     *
     * @return \MU\NewsModule\Entity\ImageEntity[]
     */
    public function getImages()
    {
        return $this->images;
    }
    
    /**
     * Sets the images.
     *
     * @param \MU\NewsModule\Entity\ImageEntity[] $images
     *
     * @return void
     */
    public function setImages($images = null)
    {
        foreach ($this->images as $imageSingle) {
            $this->removeImages($imageSingle);
        }
        foreach ($images as $imageSingle) {
            $this->addImages($imageSingle);
        }
    }
    
    /**
     * Adds an instance of \MU\NewsModule\Entity\ImageEntity to the list of images.
     *
     * @param \MU\NewsModule\Entity\ImageEntity $image The instance to be added to the collection
     *
     * @return void
     */
    public function addImages(\MU\NewsModule\Entity\ImageEntity $image)
    {
        $this->images->add($image);
        $image->setMessage($this);
    }
    
    /**
     * Removes an instance of \MU\NewsModule\Entity\ImageEntity from the list of images.
     *
     * @param \MU\NewsModule\Entity\ImageEntity $image The instance to be removed from the collection
     *
     * @return void
     */
    public function removeImages(\MU\NewsModule\Entity\ImageEntity $image)
    {
        $this->images->removeElement($image);
        $image->setMessage(null);
    }
    
    
    
    /**
     * Checks whether the approver field contains a valid user reference.
     * This method is used for validation.
     *
     * @Assert\IsTrue(message="This value must be a valid user id.")
     *
     * @return boolean True if data is valid else false
     */
    public function isApproverUserValid()
    {
        return null === $this['approver'] || $this['approver'] instanceof UserEntity;
    }
    
    /**
     * Creates url arguments array for easy creation of display urls.
     *
     * @param bool $forEditing
     *
     * @return array List of resulting arguments
     */
    public function createUrlArgs($forEditing = false)
    {
        if (true === $forEditing) {
            return [
                'id' => $this->getId(),
                'slug' => $this->getSlug()
            ];
        }
    
        return [
            'slug' => $this->getSlug()
        ];
    }
    
    /**
     * Returns the primary key.
     *
     * @return int The identifier
     */
    public function getKey()
    {
        return $this->getId();
    }
    
    /**
     * Determines whether this entity supports hook subscribers or not.
     *
     * @return bool
     */
    public function supportsHookSubscribers()
    {
        return true;
    }
    
    /**
     * Return lower case name of multiple items needed for hook areas.
     *
     * @return string
     */
    public function getHookAreaPrefix()
    {
        return 'munewsmodule.ui_hooks.messages';
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     * 
     * @param array $objects Objects that are added to this array
     * 
     * @return array List of entity objects
     */
    public function getRelatedObjectsToPersist(&$objects = [])
    {
        foreach ($this->images as $rel) {
            if (!in_array($rel, $objects, true)) {
                $objects[] = $rel;
                $rel->getRelatedObjectsToPersist($objects);
            }
        }
    
        return $objects;
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     *
     * @return string The output string for this entity
     */
    public function __toString()
    {
        return 'Message ' . $this->getKey() . ': ' . $this->getTitle();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a deep copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     */
    public function __clone()
    {
        // if the entity has no identity do nothing, do NOT throw an exception
        if (!$this->id) {
            return;
        }
    
        // otherwise proceed
    
        // unset identifier
        $this->setId(0);
    
        // reset workflow
        $this->setWorkflowState('initial');
    
        // reset upload fields
        $this->setImageUpload1(null);
        $this->setImageUpload2(null);
        $this->setImageUpload3(null);
        $this->setImageUpload4(null);
    
        $this->setCreatedBy(null);
        $this->setCreatedDate(null);
        $this->setUpdatedBy(null);
        $this->setUpdatedDate(null);
    
        // handle related objects
        // prevent shared references by doing a deep copy - see (2) and (3) for more information
        // clone referenced objects only if a new record is necessary
        $collection = $this->images;
        $this->images = new ArrayCollection();
        foreach ($collection as $rel) {
            $this->addImages( clone $rel);
        }
    
        // clone categories
        $categories = $this->categories;
        $this->categories = new ArrayCollection();
        foreach ($categories as $c) {
            $newCat = clone $c;
            $this->categories->add($newCat);
            $newCat->setEntity($this);
        }
    
        // clone attributes
        $attributes = $this->attributes;
        $this->attributes = new ArrayCollection();
        foreach ($attributes as $a) {
            $newAttr = clone $a;
            $this->attributes->add($newAttr);
            $newAttr->setEntity($this);
        }
    }
}
