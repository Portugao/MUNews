<?php

/**
 * News.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 *
 * @see https://homepages-mit-zikula.de
 * @see https://ziku.la
 *
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

declare(strict_types=1);

namespace MU\NewsModule\Listener\Base;

use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\HttpFoundation\RequestStack;
use Zikula\BlocksModule\Collectible\PendingContentCollectible;
use Zikula\BlocksModule\Event\PendingContentEvent;
use Zikula\Bundle\CoreBundle\Collection\Container;
use Zikula\Bundle\CoreBundle\HttpKernel\ZikulaHttpKernelInterface;
use MU\NewsModule\Helper\WorkflowHelper;
use Zikula\ScribiteModule\Event\EditorHelperEvent;
use Zikula\ScribiteModule\Event\LoadExternalPluginsEvent;

/**
 * Event handler implementation class for special purposes and 3rd party api support.
 */
abstract class AbstractThirdPartyListener implements EventSubscriberInterface
{
    /**
     * @var ZikulaHttpKernelInterface
     */
    protected $kernel;
    
    /**
     * @var Filesystem
     */
    protected $filesystem;
    
    /**
     * @var RequestStack
     */
    protected $requestStack;
    
    /**
     * @var WorkflowHelper
     */
    protected $workflowHelper;
    
    public function __construct(
        ZikulaHttpKernelInterface $kernel,
        Filesystem $filesystem,
        RequestStack $requestStack,
        WorkflowHelper $workflowHelper
    ) {
        $this->kernel = $kernel;
        $this->filesystem = $filesystem;
        $this->requestStack = $requestStack;
        $this->workflowHelper = $workflowHelper;
    }
    
    public static function getSubscribedEvents()
    {
        return [
            PendingContentEvent::class => ['pendingContentListener', 5],
            EditorHelperEvent::class => ['getEditorHelpers', 5],
            LoadExternalPluginsEvent::class => ['getEditorPlugins', 5],
        ];
    }
    
    /**
     * Listener for the `PendingContentEvent` which collects information from extensions
     * about pending content items waiting for approval.
     */
    public function pendingContentListener(PendingContentEvent $event): void
    {
        $collection = new Container('MUNewsModule');
        $amounts = $this->workflowHelper->collectAmountOfModerationItems();
        if (0 < count($amounts)) {
            foreach ($amounts as $amountInfo) {
                $aggregateType = $amountInfo['aggregateType'];
                $description = $amountInfo['description'];
                $amount = $amountInfo['amount'];
                $route = 'munewsmodule_' . mb_strtolower($amountInfo['objectType']) . '_adminview';
                $routeArgs = [
                    'workflowState' => $amountInfo['state'],
                ];
                $item = new PendingContentCollectible($aggregateType, $description, $amount, $route, $routeArgs);
                $collection->add($item);
            }
        
            // add collected items for pending content
            if (0 < $collection->count()) {
                $event->getSubject()->add($collection);
            }
        }
    }
    
    /**
     * Listener for the `EditorHelperEvent`.
     *
     * This occurs when Scribite adds pagevars to the editor page.
     * MUNewsModule will use this to add a javascript helper to add custom items.
     *
     * Note the selected editor name can be used like this: `if ('CKEditor' === $event->getEditor())`.
     */
    public function getEditorHelpers(EditorHelperEvent $event): void
    {
        // install assets for Scribite plugins
        $projectDir = $this->kernel->getProjectDir();
        $resourcesDir = str_replace('Listener/Base', '', __DIR__) . 'Resources/public/';
        $targetDir = $projectDir . '/public/modules/munews/scribite';
    
        if (!$this->filesystem->exists($targetDir)) {
            $originDir = $resourcesDir . 'scribite';
            if (is_dir($originDir)) {
                $this->filesystem->symlink($originDir, $targetDir, true);
            }
        }
    
        $commonEditorAssets = [
            'images/admin.png',
            'js/MUNewsModule.Finder.js',
        ];
    
        foreach ($commonEditorAssets as $assetRelativePath) {
            $assetPath = str_replace('scribite', $assetRelativePath, $targetDir);
            if (!$this->filesystem->exists($assetPath)) {
                $origin = $resourcesDir . $assetRelativePath;
                $this->filesystem->symlink($origin, $assetPath, true);
            }
        }
    
        $event->getHelperCollection()->add(
            [
                'module' => 'MUNewsModule',
                'type' => 'javascript',
                'path' => $this->getPathToModuleWebAssets() . 'js/MUNewsModule.Finder.js',
            ]
        );
    }
    
    /**
     * Listener for the `LoadExternalPluginsEvent`.
     */
    public function getEditorPlugins(LoadExternalPluginsEvent $event): void
    {
        $editorId = $event->getEditor();
        if ('CKEditor' === $editorId) {
            $event->getPluginCollection()->add([
                'name' => 'munewsmodule',
                'path' => $this->getPathToModuleWebAssets() . 'scribite/' . $editorId . '/munewsmodule/',
                'file' => 'plugin.js',
                'img' => 'ed_munewsmodule.gif',
            ]);
        } elseif (in_array($editorId, ['Quill', 'Summernote', 'TinyMce'], true)) {
            $event->getPluginCollection()->add([
                'name' => 'munewsmodule',
                'path' => $this->getPathToModuleWebAssets() . 'scribite/' . $editorId . '/munewsmodule/plugin.js',
            ]);
        }
    }
    
    /**
     * Returns base path where module assets are located.
     */
    protected function getPathToModuleWebAssets(): string
    {
        return $this->requestStack->getCurrentRequest()->getBasePath() . '/modules/munews/';
    }
}
