<?php

/**
 * News.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 *
 * @see https://homepages-mit-zikula.de
 * @see https://ziku.la
 *
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

declare(strict_types=1);

namespace MU\NewsModule\Form\Type;

use MU\NewsModule\Form\Type\Base\AbstractMessageType;
use MU\NewsModule\Form\Type\Field\UploadType;
use Symfony\Component\Form\Extension\Core\Type\CollectionType;
use Symfony\Component\Form\FormBuilderInterface;

/**
 * Message editing form type implementation class.
 */
class MessageType extends AbstractMessageType
{
    public function addEntityFields(FormBuilderInterface $builder, array $options = []): void
    {
        parent::addEntityFields($builder, $options);

        $maxSize = $this->variableApi->get('MUNewsModule', 'maxSize');

        $builder->add('imageUpload1', UploadType::class, [
            'label' => 'Image upload 1:',
            'attr' => [
                'accept' => '.' . implode(',.', $this->uploadHelper->getAllowedFileExtensions('message', 'imageUpload1')),
                'class' => ' validate-upload',
                'title' => 'Enter the image upload 1 of the message.',
            ],
            'required' => false && 'create' === $options['mode'],
            'entity' => $options['entity'],
            'allow_deletion' => true,
            'allowed_extensions' => implode(', ', $this->uploadHelper->getAllowedFileExtensions('message', 'imageUpload1')),
            'allowed_size' => $maxSize,
        ]);

        $builder->add('imageUpload2', UploadType::class, [
            'label' => 'Image upload 2:',
            'attr' => [
                'accept' => '.' . implode(',.', $this->uploadHelper->getAllowedFileExtensions('message', 'imageUpload2')),
                'class' => ' validate-upload',
                'title' => 'Enter the image upload 2 of the message.',
            ],
            'required' => false && 'create' === $options['mode'],
            'entity' => $options['entity'],
            'allow_deletion' => true,
            'allowed_extensions' => implode(', ', $this->uploadHelper->getAllowedFileExtensions('message', 'imageUpload2')),
            'allowed_size' => $maxSize,
        ]);

        $builder->add('imageUpload3', UploadType::class, [
            'label' => 'Image upload 3:',
            'attr' => [
                'accept' => '.' . implode(',.', $this->uploadHelper->getAllowedFileExtensions('message', 'imageUpload3')),
                'class' => ' validate-upload',
                'title' => 'Enter the image upload 3 of the message.',
            ],
            'required' => false && 'create' === $options['mode'],
            'entity' => $options['entity'],
            'allow_deletion' => true,
            'allowed_extensions' => implode(', ', $this->uploadHelper->getAllowedFileExtensions('message', 'imageUpload3')),
            'allowed_size' => $maxSize,
        ]);

        $builder->add('imageUpload4', UploadType::class, [
            'label' => 'Image upload 4:',
            'attr' => [
                'accept' => '.' . implode(',.', $this->uploadHelper->getAllowedFileExtensions('message', 'imageUpload4')),
                'class' => ' validate-upload',
                'title' => 'Enter the image upload 4 of the message.',
            ],
            'required' => false && 'create' === $options['mode'],
            'entity' => $options['entity'],
            'allow_deletion' => true,
            'allowed_extensions' => implode(', ', $this->uploadHelper->getAllowedFileExtensions('message', 'imageUpload4')),
            'allowed_size' => $maxSize,
        ]);
    }

    public function addOutgoingRelationshipFields(FormBuilderInterface $builder, array $options = []): void
    {
        $builder->add('images', CollectionType::class, [
            'label' => false,
            'required' => false,
            'entry_type' => ImageType::class,
            'entry_options' => [
                'label' => false,
            ],
            'allow_add' => true,
            'allow_delete' => true,
            'by_reference' => false, // use $message->addImages()/removeImages()
                                     // instead of $message->getImages()->add()/remove()
        ]);
    }
}
