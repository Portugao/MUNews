<?php

/**
 * News.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 *
 * @see https://homepages-mit-zikula.de
 * @see https://ziku.la
 *
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

declare(strict_types=1);

namespace MU\NewsModule\Controller;

use MU\NewsModule\Entity\Factory\EntityFactory;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Core\Exception\AccessDeniedException;
use Zikula\Bundle\CoreBundle\Controller\AbstractController;
use Zikula\UsersModule\Api\ApiInterface\CurrentUserApiInterface;
use Zikula\UsersModule\Entity\RepositoryInterface\UserRepositoryInterface;

/**
 * Message controller class providing navigation and interaction functionality.
 */
class ImportController extends AbstractController
{
    /**
     * Import news items from an old news site.
     *
     * @Route("/import/oldNewsArticles")
     */
    public function oldNewsArticlesAction(
        Request $request,
        EntityFactory $entityFactory,
        CurrentUserApiInterface $currentUserApi,
        UserRepositoryInterface $userRepository
    ): RedirectResponse {
        // check permission, only admins can do this.
        if (!$this->hasPermission('MUNewsModule::', '::', ACCESS_ADMIN)) {
            throw new AccessDeniedException($this->trans('You do not have pemission to import news items. Admin access is needed.'));
        }

        // you must have a news table in your database for this to work.
        $entityManager = $entityFactory->getEntityManager();
        // grab the connection
        $conn = $entityManager->getConnection();
        // do an old style SQL select statement
        $sql = '
            SELECT *
            FROM news
            WHERE 1
        ';
        $stmt = $conn->prepare($sql);
        $stmt->execute();

        // returns an array of arrays (i.e. a raw data set)
        $items = $stmt->fetchAll();
        // determine the number of items for reporting back to the user.
        $amountOfItems = count($items);
        // grab a few things that I will need for filling in the messages
        // I am taking a shortcut here since the approver of past messages may not be on the site anymore
        // and instead I am using the current ID of the person that is importing the messages who is the admin.
        $authorUid = $currentUserApi->get('uid');
        $author = $currentUserApi->get('uname');
        $user = $userRepository->find($authorUid);
        // walk the array and fill in the fields in the new data that are needed.
        foreach ($items as $item) {
            $message = $entityFactory->createMessage();
            $cr_date = new \DateTime($item['cr_date']);
            $lu_date = new \DateTime($item['lu_date']);
            $message->setTitle($item['title']);
            $message->setStartText($item['hometext']);
            $message->setMainText($item['bodytext']);
            $contributor = $item['contributor'];
            if ('' !== $contributor) {
                $message->setAuthor($contributor);
            } else {
                $message->setAuthor($author);
            }
            $message->setCreatedBy($user);
            $message->setUpdatedBy($user);
            $message->setCreatedDate($cr_date);
            $message->setUpdatedDate($lu_date);
            $message->setDisplayOnIndex($item['displayonindex']);
            $message->setAllowComments($item['allowcomments']);
            $message->setStartDate($cr_date);
            $message->setNoEndDate(true);
            $message->setWeight(1);
            $message->setSlug($item['urltitle']);
            $message->setNotes($item['notes']);
            $message->setAmountOfViews($item['counter']);
            $message->setMessageLanguage($item['language']);
            $message->setWorkflowState('approved');
            $entityManager->persist($message);
        }
        //save back to the database.
        $entityManager->flush();
        $this->addFlash(
            'status',
            $this->trans('%amountOfMessages% messages imported.', ['%amountOfMessages%' => $amountOfItems])
        );

        return $this->redirectToRoute('munewsmodule_message_adminindex');
    }
}
