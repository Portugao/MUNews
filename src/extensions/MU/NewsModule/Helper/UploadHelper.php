<?php

/**
 * News.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 *
 * @see https://homepages-mit-zikula.de
 * @see https://ziku.la
 *
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

declare(strict_types=1);

namespace MU\NewsModule\Helper;

use MU\NewsModule\Helper\Base\AbstractUploadHelper;
use Symfony\Component\HttpFoundation\File\UploadedFile;

/**
 * Helper implementation class for upload handling.
 */
class UploadHelper extends AbstractUploadHelper
{
    protected function validateFileUpload(string $objectType, UploadedFile $file, string $fieldName): bool
    {
        $result = parent::validateFileUpload($objectType, $file, $fieldName);
        if (false === $result || 'message' !== $objectType) {
            return $result;
        }

        $request = $this->requestStack->getCurrentRequest();
        $session = $request->hasSession() ? $request->getSession() : null;
        $flashBag = null !== $session ? $session->getFlashBag() : null;

        // validate size
        // get file size of uploaded image
        $fileSize = $file->getSize();

        // get setting - mod var
        $maxSize = $this->moduleVars['maxSize'];
        
        // if not empty, validate
        if ('' !== $maxSize) {
            if (false !== mb_strpos($maxSize, 'k')) {
                $sizeType = 'kilo';
            } elseif (false !== mb_strpos($maxSize, 'M')) {
                $sizeType = 'mega';
            } else {
                $sizeType = 'byte';
            }

            if ('byte' === $sizeType && $fileSize > $maxSize) {
                if (null !== $flashBag) {
                    $flashBag->add('error', $this->trans('Error! This file is too big.'));
                    $flashBag->add(
                        'status',
                        $this->trans(
                            'Try another image or make the file size smaller than %amount% bytes.',
                            ['%amount%' => $setMaxSize]
                        )
                    );
                }

                return false;
            }

            if ('kilo' === $sizeType) {
                $maxSize = str_replace('k', '', $maxSize);
                $setMaxSize = $maxSize;
                $maxSize *= 1024;
                if ($fileSize > $maxSize) {
                    if (null !== $flashBag) {
                        $flashBag->add('error', $this->trans('Error! This file is too big.'));
                        $flashBag->add(
                            'status',
                            $this->trans(
                                'Try another image or make the file size smaller than %amount% kilobytes.',
                                ['%amount%' => $setMaxSize]
                            )
                        );
                    }

                    return false;
                }
            }

            if ('mega' === $sizeType) {
                $maxSize = str_replace('M', '', $maxSize);
                $setMaxSize = $maxSize;
                $maxSize = $maxSize * 1024 * 1024;
                if ($fileSize > $maxSize) {
                    if (null !== $flashBag) {
                        $flashBag->add('error', $this->trans('Error! This file is too big.'));
                        $flashBag->add(
                            'status',
                            $this->trans(
                                'Try another image or make the file size smaller than %amount% megabytes.',
                                ['%amount%' => $setMaxSize]
                            )
                        );
                    }

                    return false;
                }
            }
        }

        return true;
    }
}
