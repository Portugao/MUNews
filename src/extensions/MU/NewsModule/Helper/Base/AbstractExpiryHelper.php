<?php

/**
 * News.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @see https://homepages-mit-zikula.de
 * @see https://ziku.la
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

declare(strict_types=1);

namespace MU\NewsModule\Helper\Base;

use Doctrine\DBAL\Exception\TableNotFoundException;
use Exception;
use Psr\Log\LoggerInterface;
use Symfony\Component\HttpFoundation\RequestStack;
use Symfony\Contracts\Translation\TranslatorInterface;
use Zikula\Bundle\CoreBundle\Doctrine\EntityAccess;
use Zikula\Bundle\CoreBundle\RouteUrl;
use Zikula\Bundle\HookBundle\Category\UiHooksCategory;
use MU\NewsModule\Entity\Factory\EntityFactory;
use MU\NewsModule\Helper\HookHelper;
use MU\NewsModule\Helper\PermissionHelper;
use MU\NewsModule\Helper\WorkflowHelper;

/**
 * Expiry helper base class.
 */
abstract class AbstractExpiryHelper
{
    /**
     * @var TranslatorInterface
     */
    protected $translator;
    
    /**
     * @var RequestStack
     */
    protected $requestStack;
    
    /**
     * @var LoggerInterface
     */
    protected $logger;
    
    /**
     * @var EntityFactory
     */
    protected $entityFactory;
    
    /**
     * @var PermissionHelper
     */
    protected $permissionHelper;
    
    /**
     * @var WorkflowHelper
     */
    protected $workflowHelper;
    
    /**
     * @var HookHelper
     */
    protected $hookHelper;
    
    public function __construct(
        TranslatorInterface $translator,
        RequestStack $requestStack,
        LoggerInterface $logger,
        EntityFactory $entityFactory,
        PermissionHelper $permissionHelper,
        WorkflowHelper $workflowHelper,
        HookHelper $hookHelper
    ) {
        $this->translator = $translator;
        $this->requestStack = $requestStack;
        $this->logger = $logger;
        $this->entityFactory = $entityFactory;
        $this->permissionHelper = $permissionHelper;
        $this->workflowHelper = $workflowHelper;
        $this->hookHelper = $hookHelper;
    }
    
    /**
     * Handles obsolete data bv either moving into the archive or deleting.
     */
    public function handleObsoleteObjects(int $probabilityPercent = 75): void
    {
        $randProbability = random_int(1, 100);
        if ($randProbability < $probabilityPercent) {
            return;
        }
    
        if ($this->permissionHelper->hasPermission(ACCESS_EDIT)) {
            // perform update for messages becoming archived
            $logArgs = ['app' => 'MUNewsModule', 'entity' => 'message'];
            $this->logger->notice('{app}: Automatic archiving for the {entity} entity started.', $logArgs);
            $this->archiveMessages();
            $this->logger->notice('{app}: Automatic archiving for the {entity} entity completed.', $logArgs);
        }
    }
    
    /**
     * Moves messages into the archive which reached their end date.
     *
     * @throws RuntimeException Thrown if workflow action execution fails
     */
    protected function archiveMessages(): void
    {
        $today = date('Y-m-d H:i:s');
    
        $affectedEntities = $this->getExpiredObjects('message', 'endDate', $today);
        foreach ($affectedEntities as $entity) {
            $this->archiveSingleObject($entity);
        }
    }
    
    /**
     * Returns the list of expired entities.
     *
     * @param mixed $endDate Datetime or date string for the threshold date
     *
     * @return array List of affected entities
     */
    protected function getExpiredObjects(string $objectType = '', string $endField = '', $endDate = '')
    {
        $repository = $this->entityFactory->getRepository($objectType);
        $qb = $repository->genericBaseQuery('', '', false);
    
        
        $qb->andWhere('tbl.workflowState = :approvedState')
           ->setParameter('approvedState', 'approved');
    
        $qb->andWhere('tbl.' . $endField . ' < :endThreshold')
           ->setParameter('endThreshold', $endDate);
    
        $query = $repository->getQueryFromBuilder($qb);
    
        try {
            return $query->getResult();
        } catch (TableNotFoundException $exception) {
            // module has just been uninstalled
            return [];
        }
    }
    
    /**
     * Archives a single entity.
     */
    protected function archiveSingleObject(EntityAccess $entity): bool
    {
        return $this->handleSingleObject($entity, 'archive');
    }
    
    /**
     * Archives or deletes a single entity.
     */
    protected function handleSingleObject(EntityAccess $entity, string $action): bool
    {
        $request = $this->requestStack->getCurrentRequest();
        $session = $request->hasSession() ? $request->getSession() : null;
        if ($entity->supportsHookSubscribers()) {
            // let any hooks perform additional validation actions
            $hookType = 'delete' === $action
                ? UiHooksCategory::TYPE_VALIDATE_DELETE
                : UiHooksCategory::TYPE_VALIDATE_EDIT
            ;
            $validationErrors = $this->hookHelper->callValidationHooks($entity, $hookType);
            if (0 < count($validationErrors)) {
                if (null !== $session) {
                    foreach ($validationErrors as $message) {
                        $session->getFlashBag()->add('error', $message);
                    }
                }
    
                return false;
            }
        }
    
        $success = false;
        try {
            // execute the workflow action
            $success = $this->workflowHelper->executeAction($entity, $action);
        } catch (Exception $exception) {
            if (null !== $session) {
                $session->getFlashBag()->add(
                    'error',
                    $this->translator->trans(
                        'Sorry, but an error occured during the %action% action. Please apply the changes again!',
                        ['%action%' => $action]
                    ) . '  ' . $exception->getMessage()
                );
            }
        }
    
        if (!$success) {
            return false;
        }
    
        if ($entity->supportsHookSubscribers()) {
            // let any hooks know that we have updated an item
            $objectType = $entity->get_objectType();
            $url = null;
    
            $hasDisplayPage = in_array($objectType, ['message']);
            if ($hasDisplayPage) {
                $urlArgs = $entity->createUrlArgs();
                if (null !== $request) {
                    $urlArgs['_locale'] = $request->getLocale();
                }
                $url = new RouteUrl('munewsmodule_' . strtolower($objectType) . '_display', $urlArgs);
            }
            $hookType = 'delete' === $action
                ? UiHooksCategory::TYPE_PROCESS_DELETE
                : UiHooksCategory::TYPE_PROCESS_EDIT
            ;
            $this->hookHelper->callProcessHooks($entity, $hookType, $url);
        }
    
        return $success;
    }
}
